#!/bin/bash

USER_LOCAL="\${HOME}/opt"
CRUNCH_ROOT="$(cd $(dirname ${BASH_SOURCE[0]}); pwd -P)"

SHORTOPTS="u:c:" 
LONGOPTS="USER_LOCAL:,CRUNCH_ROOT:" 

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS -- "$@" ) 

eval set -- "$ARGS" 

while true
do
    case $1 in
        -u|--USER_LOCAL)
            USER_LOCAL=$2
            shift
            ;;
        -c|--CRUNCH_ROOT)
            CRUNCH_ROOT=$2
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            shift
            break
            ;;
    esac
    shift
done

USER_LOCAL="${USER_LOCAL}"
pythonpath="${CRUNCH_ROOT}/packages/python"
softwarepath="${CRUNCH_ROOT}/modules/software"
currpath=$(pwd)

if ! [ -f ${HOME}/.bashrc ]
then
    touch ${HOME}/.bashrc
fi

rm ${HOME}/.newbashrc 2>/dev/null
firstline=true
prevline=""
while IFS=$'\n' read -r line
do
    if ! ${firstline} && [[ "${prevline}" == "" ]] && ! [[ "${line}" =~ .*"# DBCrunch environment variables".* ]]
    then
        printf '%s\n' "${prevline}" >> ${HOME}/.newbashrc
    fi

    if [[ "${line}" != "" ]] && ! [[ "${line}" =~ .*"# DBCrunch environment variables".* ]] && ! [[ "${line}" =~ .*"export USER_LOCAL".* ]] && ! [[ "${line}" =~ .*"export CRUNCH_ROOT".* ]] && ! [[ "${line}" =~ .*"export PATH".*"CRUNCH_ROOT".* ]]
    then
        printf '%s\n' "${line}" >> ${HOME}/.newbashrc
    fi
    firstline=false
    prevline=${line}
done < ${HOME}/.bashrc

echo "" >> ${HOME}/.newbashrc
echo "# DBCrunch environment variables" >> ${HOME}/.newbashrc
echo "export USER_LOCAL=${USER_LOCAL}" >> ${HOME}/.newbashrc
echo "export CRUNCH_ROOT="$(echo ${CRUNCH_ROOT} | sed 's|'"${HOME}"'|${HOME}|g' | sed 's|'"${USER}"'|${USER}|g') >> ${HOME}/.newbashrc
echo "export PATH=\${USER_LOCAL}/bin:\${CRUNCH_ROOT}/bin:\${PATH}" >> ${HOME}/.newbashrc

mv ${HOME}/.bashrc ${HOME}/.oldbashrc
mv ${HOME}/.newbashrc ${HOME}/.bashrc

wait
source ${HOME}/.bashrc
wait

if [ ! -d "${HOME}/.bash_completion" ]
then
    touch ${HOME}/.bash_completion
fi
rm ${HOME}/.newbash_completion 2>/dev/null
firstline=true
prevline=""
while IFS=$'\n' read -r line
do
    if ! ${firstline} && [[ "${prevline}" == "" ]] && ! [[ "${line}" =~ .*"# DBCrunch completions".* ]]
    then
        printf '%s\n' "${prevline}" >> ${HOME}/.newbash_completion
    fi

    if [[ "${line}" != "" ]] && ! [[ "${line}" =~ .*"# DBCrunch completions".* ]] && ! [[ "${line}" =~ .*". ${CRUNCH_ROOT}/bin/bash_completion".* ]]
    then
        printf '%s\n' "${line}" >> ${HOME}/.newbash_completion
    fi
    firstline=false
    prevline=${line}
done < ${HOME}/.bash_completion

echo "" >> ${HOME}/.newbash_completion
echo "# DBCrunch completions" >> ${HOME}/.newbash_completion
echo ". ${CRUNCH_ROOT}/bin/bash_completion" >> ${HOME}/.newbash_completion

mv ${HOME}/.bash_completion ${HOME}/.oldbash_completion
mv ${HOME}/.newbash_completion ${HOME}/.bash_completion

wait
source ${HOME}/.bash_completion
wait

#Update submodules
cd ${CRUNCH_ROOT}
git submodule update --init --recursive

#Install external software
for file in $(find ${softwarepath}/ -type f 2>/dev/null)
do
    ${file}
    wait
done

#Install mpi4py
if $(python -c "import mpi4py" |& grep -q "ImportError" && echo true || echo false)
then
    cd ${HOME}
    rm -r ${HOME}/mpi4py 2>/dev/null
    git clone https://github.com/mpi4py/mpi4py.git mpi4py
    wait
    cd mpi4py
    git checkout 2.0.0
    wait
    rm -rf .git
    python setup.py install --user
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user
    fi
    wait
    cd ..
    rm -rf pymongo
fi

#Install pymongo
if $(python -c "import pymongo" |& grep -q "ImportError" && echo true || echo false)
then
    cd ${HOME}
    rm -r ${HOME}/pymongo 2>/dev/null
    git clone https://github.com/mongodb/mongo-python-driver.git pymongo
    wait
    cd pymongo
    git checkout 3.5.1
    wait
    rm -rf .git
    python setup.py install --user
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user
    fi
    wait
    cd ..
    rm -rf pymongo
fi

#Install mongolink
cd ${pythonpath}/mongolink
python setup.py install --user --record filespy.txt
if [[ "$(command -v sage)" != "" ]]
then
    sage --python setup.py install --user --record filessage.txt
fi

cd ${currpath}