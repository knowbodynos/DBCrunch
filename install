#!/bin/bash

# Accept user-specified arguments

USER_LOCAL="${HOME}/opt"
CRUNCH_ROOT="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd -P)"

SHORTOPTS="u:c:" 
LONGOPTS="USER_LOCAL:,CRUNCH_ROOT:" 

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS -- "$@" ) 

eval set -- "$ARGS" 

while true
do
    case $1 in
        -u|--USER_LOCAL)
            USER_LOCAL=$2
            shift
            ;;
        -c|--CRUNCH_ROOT)
            CRUNCH_ROOT=$2
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            shift
            break
            ;;
    esac
    shift
done

# Source DBCrunch environment variables

echo "Sourcing DBCrunch environment variables..."

if [ ! -f ${HOME}/.bashrc ]
then
    touch ${HOME}/.bashrc
fi

if ! grep -q "# Source DBCrunch environment variables" ${HOME}/.bashrc
then
    echo "" >> ${HOME}/.bashrc
    echo "# Source DBCrunch environment variables" >> ${HOME}/.bashrc
    echo "" >> ${HOME}/.bashrc
    echo "export USER_LOCAL="$(echo ${USER_LOCAL} | sed 's|'"${HOME}"'|${HOME}|g' | sed 's|'"${USER}"'|${USER}|g') >> ${HOME}/.bashrc
    echo "export CRUNCH_ROOT="$(echo ${CRUNCH_ROOT} | sed 's|'"${HOME}"'|${HOME}|g' | sed 's|'"${USER}"'|${USER}|g') >> ${HOME}/.bashrc
    echo "export PATH=\${USER_LOCAL}/bin:\${CRUNCH_ROOT}/bin:\${PATH}" >> ${HOME}/.bashrc
fi

# Source DBCrunch bash completions

echo "Sourcing DBCrunch bash completions..."

if [ ! -f ${HOME}/.bash_completion ]
then
    touch ${HOME}/.bash_completion
fi

if ! grep -q "# Source DBCrunch bash completions" ${HOME}/.bash_completion
then
    echo "" >> ${HOME}/.bash_completion
    echo "# Source DBCrunch bash completions" >> ${HOME}/.bash_completion
    echo "" >> ${HOME}/.bash_completion
    echo "if [ -f \${CRUNCH_ROOT}/bin/bash_completion ]" >> ${HOME}/.bash_completion
    echo "then" >> ${HOME}/.bash_completion
    echo "    . \${CRUNCH_ROOT}/bin/bash_completion" >> ${HOME}/.bash_completion
    echo "fi" >> ${HOME}/.bash_completion
fi

# Source all bash completions

echo "Sourcing all bash completions..."

if ! grep -q "# Source bash completions" ${HOME}/.bashrc
then
    echo "" >> ${HOME}/.bashrc
    echo "# Source bash completions" >> ${HOME}/.bashrc
    echo "" >> ${HOME}/.bashrc
    echo "if [ -f \${HOME}/.bash_completion ]" >> ${HOME}/.bashrc
    echo "then" >> ${HOME}/.bashrc
    echo "    . \${HOME}/.bash_completion" >> ${HOME}/.bashrc
    echo "fi" >> ${HOME}/.bashrc
fi

. ${HOME}/.bashrc

currpath=$(pwd)

# Update submodules

echo "Updating submodules..."

cd ${CRUNCH_ROOT}
git submodule update --init --recursive

# Install external software

echo "Installing external software..."

for file in $(find ${CRUNCH_ROOT}/modules/install -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
do
    ${file}
    wait
done

# Install mpi4py package

echo "Installing mpi4py package..."

if $(python -c "import mpi4py" |& grep -q "ImportError" && echo true || echo false)
then
    cd ${HOME}
    rm -r ${HOME}/mpi4py 2>/dev/null
    git clone https://github.com/mpi4py/mpi4py.git mpi4py
    wait
    cd mpi4py
    git checkout 2.0.0
    wait
    rm -rf .git
    python setup.py install --user
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user
    fi
    wait
    cd ..
    rm -rf pymongo
fi

# Install pymongo

if $(python -c "import pymongo" |& grep -q "ImportError" && echo true || echo false)
then
    cd ${HOME}
    rm -r ${HOME}/pymongo 2>/dev/null
    git clone https://github.com/mongodb/mongo-python-driver.git pymongo
    wait
    cd pymongo
    git checkout 3.5.1
    wait
    rm -rf .git
    python setup.py install --user
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user
    fi
    wait
    cd ..
    rm -rf pymongo
fi

# Install pymongojoin

if $(python -c "import pymongojoin" |& grep -q "ImportError" && echo true || echo false)
then
    cd ${HOME}
    rm -r ${HOME}/pymongojoin 2>/dev/null
    git clone https://github.com/knowbodynos/pymongojoin.git pymongojoin
    wait
    cd pymongojoin
    git checkout master
    wait
    rm -rf .git
    python setup.py install --user
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user
    fi
    wait
    cd ..
    rm -rf pymongojoin
fi

# Install config API

echo "Installing config API..."

#     Install crunch_slurm

cd ${CRUNCH_ROOT}/api/crunch_config
python setup.py install --user --record filespy.txt
if [[ "$(command -v sage)" != "" ]]
then
    sage --python setup.py install --user --record filessage.txt
fi

# Install database APIs

echo "Installing database APIs..."

for db_api in $(find ${CRUNCH_ROOT}/api/db -mindepth 1 -maxdepth 1 -type d)
do
    cd ${db_api}
    python setup.py install --user --record filespy.txt
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user --record filessage.txt
    fi
done

#Install workload manager APIs

echo "Installing workload manager APIs..."

for wm_api in $(find ${CRUNCH_ROOT}/api/wm -mindepth 1 -maxdepth 1 -type d)
do
    cd ${db_api}
    python setup.py install --user --record filespy.txt
    if [[ "$(command -v sage)" != "" ]]
    then
        sage --python setup.py install --user --record filessage.txt
    fi
done

cd ${currpath}