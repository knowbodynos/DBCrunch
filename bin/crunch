#!/bin/bash

do_crunch () {
    modpath=$1
    controllerpath=$2
    workpath=$3

    jobs=$(find ${controllerpath}/ -type f -name "*.job" -not -path '*/\.*' 2>/dev/null)
    for job in ${jobs}
    do
        jobname=$(echo ${job} | rev | cut -d'/' -f1 | rev)
        jobmsg=$(sbatch ${job} 2>&1)
        echo "${jobmsg} as ${jobname}."
    done
}

ProgName=$(basename "${BASH_SOURCE[0]}")
ProgDir=$(cd $(dirname "${BASH_SOURCE[0]}"); pwd -P)
  
sub_help(){
    echo "Usage: $ProgName [<subcommand>] [options]\n"
    echo "    crunch            Submit controller batch job in current directory"
    echo "Subcommands:"
    echo "    crunch cancel     Cancel module or controller jobs"
    echo "    crunch monitor    Monitor all controller jobs"
    echo "    crunch requeue    Requeue jobs skipped by controller"
    echo "    crunch reset      Reset controller for a module"
    echo "    crunch submit     Submit controller batch job"
    echo "    crunch template   Create new controller for a module from a template"
    echo ""
    echo "For help with each subcommand run:"
    echo "$ProgName <subcommand> -h|--help"
    echo ""
}

sub_cancel(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/cancel $(pwd -P)
    else
        if [ ! -d "$1" ]
        then
            ${ProgDir}/cancel $(pwd -P) ${@}
        else
            ${ProgDir}/cancel ${@}
        fi
    fi
}

sub_monitor(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/monitor 1
    else
        ${ProgDir}/monitor $1
    fi
}

sub_requeue(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/requeue $(pwd -P)
    else
        if [ ! -d "$1" ]
        then
            ${ProgDir}/requeue $(pwd -P) ${@}
        else
            ${ProgDir}/requeue ${@}
        fi
    fi
}

sub_reset(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/reset $(pwd -P)
    else
        if [ ! -d "$1" ]
        then
            ${ProgDir}/reset $(pwd -P) ${@}
        else
            ${ProgDir}/reset ${@}
        fi
    fi
}

sub_submit(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/submit $(pwd -P)
    else
        if [ ! -d "$1" ]
        then
            ${ProgDir}/submit $(pwd -P) ${@}
        else
            ${ProgDir}/submit ${@}
        fi
    fi
}

sub_template(){
    if [ "$#" -eq 0 ]
    then
        ${ProgDir}/template $(pwd -P)
    else
        if [ ! -d "$1" ]
        then
            ${ProgDir}/template $(pwd -P) ${@}
        else
            ${ProgDir}/template ${@}
        fi
    fi
}
  
subcommand=$1
case $subcommand in
    "-h" | "--help")
        sub_help
        ;;
    "")
        startpath=$(pwd -P)
        origdepth=$(echo ${startpath} | grep -o / | wc -l)
        depth=$(find ${startpath} -mindepth 1 -type d -name jobs -not -path '*/\.*' -exec bash -c 'echo '{}' 2>/dev/null | grep -o / | wc -l' \; -quit 2>/dev/null)
        if [[ "${depth}" == "" ]]
        then
            depthdiff=0
        else
            depthdiff=$((${depth}-${origdepth}))
        fi

        case ${depthdiff} in
            0)
                modpath=$(echo ${startpath} | rev | cut -d'/' -f1,2 --complement | rev)
                controllerpath=$(echo ${startpath} | rev | cut -d'/' -f1 --complement | rev)
                workpath="${controllerpath}/jobs"
                ;;
            1)
                modpath=$(echo ${startpath} | rev | cut -d'/' -f1 --complement | rev)
                controllerpath="${startpath}"
                workpath="${controllerpath}/jobs"
                ;;
            *)
                echo "Error: You are currently in the ${startpath} directory. You must be inside a controller directory."
                exit 1
                ;;
        esac

        do_crunch ${modpath} ${controllerpath} ${workpath}
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac